import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;

public class Solution {

    // Complete the bfs function below.
     static int[] bfs(int n, int m, int[][] edges, int s) {
     int[] result = new int[n+1];    
        
    for (int i = 1; i < n+1; i++) {
        if(i != s)
            result[i] = -1;
        else
            result[i] = 0;
    }
    Queue<Integer> queue = new LinkedList<Integer>();
    queue.add(s);
    int j=0;
    while(!queue.isEmpty()) {
        int track = queue.poll();
        for (int i = 0; i < m; i++) {
            if(edges[i][0] == track){
                
                if(track == s && result[edges[i][1]] == -1){
                    result[edges[i][1]] =  6;
                    queue.add(edges[i][1]);
                }else if(result[edges[i][1]] == -1 || (result[edges[i][0]] >=6 && result[edges[i][0]] + 6 < result[edges[i][0]])){
                    result[edges[i][1]] = result[edges[i][0]] + 6;
                    queue.add(edges[i][1]);
                }
            }
        }
        
    }
    j=0;
    int[] r = new int[n-1];
    for(int i=1; i<n;i++){
        if(i == s)
            j++;
        r[i-1] = result[i+j];
        
    }

    return r;
}

    private static final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) throws IOException {
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int q = scanner.nextInt();
        scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

        for (int qItr = 0; qItr < q; qItr++) {
            String[] nm = scanner.nextLine().split(" ");

            int n = Integer.parseInt(nm[0]);

            int m = Integer.parseInt(nm[1])* 2;

            int[][] edges = new int[m][2];

            for (int i = 0; i < m; i++) {
                String[] edgesRowItems = scanner.nextLine().split(" ");
                scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");
                for (int j = 0; j < 2; j++) {
                    int edgesItem = Integer.parseInt(edgesRowItems[j]);
                    edges[i][j] = edgesItem;
                }
                i++;
                for (int j = 0; j < 2; j++) {
                    if(j==0){
                        int edgesItem = Integer.parseInt(edgesRowItems[0]);
                        edges[i][1] = edgesItem;
                    }
                    if(j==1){
                        int edgesItem = Integer.parseInt(edgesRowItems[1]);
                        edges[i][0] = edgesItem;
                    }
                }
            }

            int s = scanner.nextInt();
            scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

            int[] result = bfs(n, m, edges, s);

            for (int i = 0; i < result.length; i++) {
                bufferedWriter.write(String.valueOf(result[i]));

                if (i != result.length - 1) {
                    bufferedWriter.write(" ");  
                }
            }

            bufferedWriter.newLine();
        }

        bufferedWriter.close();

        scanner.close();
    }
}
